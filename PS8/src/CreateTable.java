/* 
 * Helen Liu
 * 30245078
 * hliu14@cmc.edu
 */

import java.io.*;
import java.util.ArrayList;

import javax.tools.*;

public class CreateTable {

    public static void main(String[] args) throws IOException {

        // NOT ACTUALLY USED BY FINAL CODE - FOR TESTING PURPOSES ONLY
    	
    	String name = "People";
        ArrayList<String> attrNames = new ArrayList<String>(50);
        ArrayList<String> attrTypes = new ArrayList<String>(50);
        
        attrNames.add("id");
        attrNames.add("major");
        attrNames.add("gpa");
        
        attrTypes.add("INTEGER");
        attrTypes.add("STRING");
        attrTypes.add("DOUBLE");
        
        writeTableClass(name, attrNames, attrTypes);
        
        String classToCreate = name;
        String fileToCompile = name + ".java";
        //String fileToCompile = ".//src/" + name + ".java";
        
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        
        //int compilationResult = compiler.run(null, null, null, "-d", ".//bin/", fileToCompile);
        int compilationResult = compiler.run(null, null, null, fileToCompile);
        
        if (compilationResult == 0) {
        	System.out.println("Compilation is successful");
        } else {
        	System.out.println("Compilation Failed");
        }
    }
    
    public static String parseType(String type) {
    	if (type.equals("INTEGER") || type.equals("integer") || type.equals("Integer")) {
    		return "int";
    	} else if (type.equals("STRING") || type.equals("string") || type.equals("String")) {
    		return "String";
    	} else {
    		return "double";
    	}
    }
    
    public static String initialize(String parsedType) {
    	if (parsedType.equals("int") || parsedType.equals("double")) {
    		return "0";
    	} else { // if parsedType is a String
    		return "null";
    	}
    }
    
    public static String parameterListToString(ArrayList<String> attrNames, ArrayList<String> attrTypes) {
    	String result = "";
    	//String result = "";
    	int lastIndex = attrNames.size() - 1;
    	for (int i = 0; i < attrNames.size() - 1; i++) { // for all but last element, add comma at end
    		result = result.concat(parseType(attrTypes.get(i)) + " " + attrNames.get(i) + ", ");
    	}
    	result = result.concat(parseType(attrTypes.get(lastIndex)) + " " + attrNames.get(lastIndex)); // last element
    	return result;
    }
    
    public static void createGetFunc(PrintWriter fw, String attrName, String attrType){
    	fw.print("	public " + parseType(attrType) + " get" + attrName + " () {\n");
    	fw.print("		return " + attrName + ";\n");
    	fw.print("	}");
    }
    
    public static void createSetFunc(PrintWriter fw, String attrName, String attrType){
    	fw.print("	public void set" + attrName + " (" + parseType(attrType) + " " + attrName + ") {\n");
    	fw.print("		this." + attrName + " = " + attrName + ";\n");
    	fw.print("	}");
    }
    
    public static void writeTableClass(String name, ArrayList<String> attrNames, ArrayList<String> attrTypes) throws IOException {
    	PrintWriter fw = null;
    	String outFname = ".//src/" + name + ".java";
    	//String outFname = ".//" + name + ".java";
    	fw = new PrintWriter(new 
    						BufferedWriter(new 
    										FileWriter(outFname)));
    	
    	fw.print("// This file is generated by CreateTable.java...\n");
    	fw.print("\n");
    	fw.print("public class " + name + " {\n");
    	fw.print("\n");
    	for (int i = 0; i < attrNames.size(); i++) { // declare each variable
    		fw.print("	public " + parseType(attrTypes.get(i)) + " " + attrNames.get(i) + ";\n");
    	}
    	fw.print("\n");
    	fw.print("	public " + name + " () { \n"); // empty constructor
    	for (int i = 0; i < attrNames.size(); i++) { // initialize each variable (attribute)
        	fw.print("		" + attrNames.get(i) + " = " + initialize(parseType(attrTypes.get(i))) + ";\n");
    	}
    	fw.print("	}\n");
    	fw.print("\n");
    	fw.print("	public " + name + "(" + parameterListToString(attrNames, attrTypes) + ") {\n");
    	for (int i = 0; i < attrNames.size(); i++) { // initialize each variable (attribute)
    		fw.print("		this." + attrNames.get(i) + " = " + attrNames.get(i) + ";\n"); // ex: this.id = id;
    	}
    	fw.print("	}\n");
    	fw.print("\n");
    	for (int i = 0; i < attrNames.size(); i++) { // create get function for each variable
    		createGetFunc(fw, attrNames.get(i), attrTypes.get(i));
    		fw.print("\n");
    	}
    	fw.print("\n");
    	for (int i = 0; i < attrNames.size(); i++) { // create set function for each variable
    		createSetFunc(fw, attrNames.get(i), attrTypes.get(i));
    		fw.print("\n");
    	}
    	fw.print("\n");
    	fw.print("}\n");
    	
    	fw.close();
    }

}